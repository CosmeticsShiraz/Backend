services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: ghcr.io/CosmeticsShiraz/backend
    container_name: backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M
    env_file:
      - ./.env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      - db
      - rdb
      - rabbitmq

  db:
    image: postgres:latest
    container_name: db
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - ./db_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 2G
        reservations:
          cpus: "0.2"
          memory: 512M

  rdb:
    image: redis:latest
    container_name: rdb
    restart: unless-stopped
    ports:
      - ${RDB_PORT}:${RDB_PORT}
    volumes:
      - rdb_data:/var/lib/redis/data
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 64M

  prometheus:
    image: prom/prometheus:main
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alertmanager/rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

  node-exporter:
    image: prom/node-exporter:master
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 32M

  postgres-exporter:
    image: bitnami/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 32M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - rdb
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 256M
        reservations:
          cpus: "0.05"
          memory: 64M

  alertmanager:
    image: prom/alertmanager:main
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    environment:
      - EMAIL_PAT=${EMAIL_PAT}
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 32M

  grafana:
    image: grafana/grafana:main
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 384M
        reservations:
          cpus: "0.1"
          memory: 128M

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "${AMQP_PORT}:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${AMQP_USER}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${AMQP_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

volumes:
  db_data:
  rdb_data:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  rabbitmq_data:
