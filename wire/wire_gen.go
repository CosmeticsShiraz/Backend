// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/CosmeticsShiraz/Backend/bootstrap"
	"github.com/CosmeticsShiraz/Backend/internal/application/service"
	"github.com/CosmeticsShiraz/Backend/internal/application/usecase"
	"github.com/CosmeticsShiraz/Backend/internal/domain/communication"
	logger2 "github.com/CosmeticsShiraz/Backend/internal/domain/logger"
	metrics2 "github.com/CosmeticsShiraz/Backend/internal/domain/metrics"
	postgres2 "github.com/CosmeticsShiraz/Backend/internal/domain/repository/postgres"
	redis2 "github.com/CosmeticsShiraz/Backend/internal/domain/repository/redis"
	"github.com/CosmeticsShiraz/Backend/internal/domain/s3"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/communication/email"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/communication/sms"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/database"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/jwt"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/localization"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/logger"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/metrics"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/repository/postgres"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/repository/redis"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/seed"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/storage"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/address"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/news"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/user"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/middleware"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApplication(container *bootstrap.Config) (*Application, error) {
	bootstrapDatabase := ProvideDBConfig(container)
	postgresDatabase := database.NewPostgresDatabase(bootstrapDatabase)
	bootstrapRedis := ProvideRDBConfig(container)
	redisDatabase := database.NewRedisDatabase(bootstrapRedis)
	wireDatabase := &Database{
		DB:  postgresDatabase,
		RDB: redisDatabase,
	}
	constants := ProvideConstants(container)
	otp := ProvideOTPConfig(container)
	userCacheRepository := redis.NewUserCacheRepository(redisDatabase)
	otpService := service.NewOTPService(constants, otp, userCacheRepository)
	keyManager := jwt.NewJWTKeyManager()
	jwtKeysPath := ProvideJWTKeysPath(container)
	jwtService := service.NewJWTService(keyManager, jwtKeysPath)
	smsGateway := ProvideSMSGatewayConfig(container)
	smsTemplates := ProvideSMSTemplates(container)
	smsService := sms.NewSMSService(smsGateway, smsTemplates)
	emailAccount := ProvideEmailSenderAccount(container)
	emailTemplates := ProvideEmailTemplates(container)
	emailService := email.NewEmailService(emailAccount, emailTemplates)
	s3 := ProvideStorageConfig(container)
	s3Storage := storage.NewS3Storage(constants, s3)
	userRepository := postgres.NewUserRepository()
	userServiceDeps := service.UserServiceDeps{
		Constants:           constants,
		OTPService:          otpService,
		JWTService:          jwtService,
		SMSService:          smsService,
		EmailService:        emailService,
		S3Storage:           s3Storage,
		UserRepository:      userRepository,
		UserCacheRepository: userCacheRepository,
		DB:                  postgresDatabase,
	}
	userService := service.NewUserService(userServiceDeps)
	generalUserController := user.NewGeneralUserController(constants, userService, jwtService)
	addressRepository := postgres.NewAddressRepository()
	addressService := service.NewAddressService(constants, addressRepository, postgresDatabase)
	generalAddressController := address.NewGeneralAddressController(constants, addressService)
	pagination := ProvidePaginationConfig(container)
	newsRepository := postgres.NewNewsRepository()
	newsService := service.NewNewsService(constants, userService, s3Storage, newsRepository, postgresDatabase)
	generalNewsController := news.NewGeneralNewsController(constants, pagination, newsService)
	generalControllers := &GeneralControllers{
		UserController:    generalUserController,
		AddressController: generalAddressController,
		NewsController:    generalNewsController,
	}
	customerUserController := user.NewCustomerUserController(constants, userService)
	customerAddressController := address.NewCustomerAddressController(constants, addressService)
	customerControllers := &CustomerControllers{
		UserController:    customerUserController,
		AddressController: customerAddressController,
	}
	adminUserController := user.NewAdminUserController(constants, pagination, userService)
	adminNewsController := news.NewAdminNewsController(constants, pagination, newsService)
	adminControllers := &AdminControllers{
		UserController: adminUserController,
		NewsController: adminNewsController,
	}
	controllers := &Controllers{
		General:  generalControllers,
		Customer: customerControllers,
		Admin:    adminControllers,
	}
	authMiddleware := middleware.NewAuthMiddleware(constants, jwtService, userRepository, postgresDatabase)
	corsMiddleware := middleware.NewCorsMiddleware()
	recoveryMiddleware := middleware.NewRecovery(constants)
	translator := localization.NewTranslationService()
	localizationMiddleware := middleware.NewLocalization(constants, translator)
	rateLimit := ProvideRateLimitConfig(container)
	rateLimitMiddleware := middleware.NewRateLimit(rateLimit)
	bootstrapLogger := ProvideLoggerConfig(container)
	loggerLogger, err := logger.NewLogger(bootstrapLogger, constants)
	if err != nil {
		return nil, err
	}
	loggerMiddleware := middleware.NewLoggerMiddleware(loggerLogger)
	bootstrapMetrics := ProvideMetrics(container)
	prometheusMetrics := metrics.NewPrometheusMetrics(bootstrapMetrics)
	prometheusMiddleware := middleware.NewPrometheusMiddleware(prometheusMetrics)
	middlewares := &Middlewares{
		Authentication: authMiddleware,
		CORS:           corsMiddleware,
		Recovery:       recoveryMiddleware,
		Localization:   localizationMiddleware,
		RateLimit:      rateLimitMiddleware,
		Logger:         loggerMiddleware,
		Prometheus:     prometheusMiddleware,
	}
	addressSeeder := seed.NewAddressSeeder(addressRepository, postgresDatabase)
	adminCredentials := ProvideSuperAdminCredential(container)
	roleSeeder := seed.NewRoleSeeder(adminCredentials, userRepository, postgresDatabase)
	seeds := &Seeds{
		AddressSeeder: addressSeeder,
		RoleSeeder:    roleSeeder,
	}
	application := NewApplication(wireDatabase, controllers, middlewares, seeds)
	return application, nil
}

// wire.go:

var DatabaseProviderSet = wire.NewSet(database.NewPostgresDatabase, database.NewRedisDatabase, wire.Bind(new(database.Database), new(*database.PostgresDatabase)), wire.Bind(new(database.Cache), new(*database.RedisDatabase)), wire.Struct(new(Database), "*"))

var RepositoryProviderSet = wire.NewSet(postgres.NewUserRepository, postgres.NewAddressRepository, redis.NewUserCacheRepository, postgres.NewNewsRepository, wire.Bind(new(postgres2.UserRepository), new(*postgres.UserRepository)), wire.Bind(new(postgres2.AddressRepository), new(*postgres.AddressRepository)), wire.Bind(new(redis2.UserCacheRepository), new(*redis.UserCacheRepository)), wire.Bind(new(postgres2.NewsRepository), new(*postgres.NewsRepository)))

var ServiceProviderSet = wire.NewSet(wire.Struct(new(service.UserServiceDeps), "*"), service.NewUserService, service.NewOTPService, sms.NewSMSService, email.NewEmailService, service.NewJWTService, service.NewAddressService, service.NewNewsService, wire.Bind(new(usecase.UserService), new(*service.UserService)), wire.Bind(new(usecase.OTPService), new(*service.OTPService)), wire.Bind(new(communication.SMSService), new(*sms.SMSService)), wire.Bind(new(communication.EmailService), new(*email.EmailService)), wire.Bind(new(usecase.JWTService), new(*service.JWTService)), wire.Bind(new(usecase.AddressService), new(*service.AddressService)), wire.Bind(new(usecase.NewsService), new(*service.NewsService)))

var AdapterProviderSet = wire.NewSet(localization.NewTranslationService, logger.NewLogger, jwt.NewJWTKeyManager, metrics.NewPrometheusMetrics, storage.NewS3Storage, wire.Bind(new(logger2.Logger), new(*logger.Logger)), wire.Bind(new(metrics2.MetricsClient), new(*metrics.PrometheusMetrics)), wire.Bind(new(s3.S3Storage), new(*storage.S3Storage)))

var GeneralControllerProviderSet = wire.NewSet(user.NewGeneralUserController, address.NewGeneralAddressController, news.NewGeneralNewsController, wire.Struct(new(GeneralControllers), "*"))

var CustomerControllerProviderSet = wire.NewSet(user.NewCustomerUserController, address.NewCustomerAddressController, wire.Struct(new(CustomerControllers), "*"))

var AdminControllerProviderSet = wire.NewSet(user.NewAdminUserController, news.NewAdminNewsController, wire.Struct(new(AdminControllers), "*"))

var ControllersProviderSet = wire.NewSet(wire.Struct(new(Controllers), "*"))

var MiddlewareProviderSet = wire.NewSet(middleware.NewAuthMiddleware, middleware.NewCorsMiddleware, middleware.NewRecovery, middleware.NewLocalization, middleware.NewRateLimit, middleware.NewLoggerMiddleware, middleware.NewPrometheusMiddleware, wire.Struct(new(Middlewares), "*"))

var SeederProviderSet = wire.NewSet(seed.NewAddressSeeder, seed.NewRoleSeeder, wire.Struct(new(Seeds), "*"))

func ProvideConstants(container *bootstrap.Config) *bootstrap.Constants {
	return container.Constants
}

func ProvideLoggerConfig(container *bootstrap.Config) *bootstrap.Logger {
	return &container.Env.Logger
}

func ProvideRateLimitConfig(container *bootstrap.Config) *bootstrap.RateLimit {
	return &container.Env.RateLimit
}

func ProvideDBConfig(container *bootstrap.Config) *bootstrap.Database {
	return &container.Env.PrimaryDB
}

func ProvideRDBConfig(container *bootstrap.Config) *bootstrap.Redis {
	return &container.Env.PrimaryRedis
}

func ProvideOTPConfig(container *bootstrap.Config) *bootstrap.OTP {
	return &container.Env.OTP
}

func ProvideSMSGatewayConfig(container *bootstrap.Config) *bootstrap.SMSGateway {
	return &container.Env.SMSGateway
}

func ProvideSMSTemplates(container *bootstrap.Config) *bootstrap.SMSTemplates {
	return &container.Constants.SMSTemplates
}

func ProvideJWTKeysPath(container *bootstrap.Config) *bootstrap.JWTKeysPath {
	return &container.Constants.JWTKeysPath
}

func ProvideEmailTemplates(container *bootstrap.Config) *bootstrap.EmailTemplates {
	return &container.Constants.EmailTemplates
}

func ProvideMetrics(container *bootstrap.Config) *bootstrap.Metrics {
	return &container.Constants.Metrics
}

func ProvidePaginationConfig(container *bootstrap.Config) *bootstrap.Pagination {
	return &container.Env.Pagination
}

func ProvideStorageConfig(container *bootstrap.Config) *bootstrap.S3 {
	return &container.Env.Storage
}

func ProvideEmailSenderAccount(container *bootstrap.Config) *bootstrap.EmailAccount {
	return &container.Env.EmailSenderAccount
}

func ProvideSuperAdminCredential(container *bootstrap.Config) *bootstrap.AdminCredentials {
	return &container.Env.SuperAdmin
}

var ProviderSet = wire.NewSet(
	DatabaseProviderSet,
	RepositoryProviderSet,
	ServiceProviderSet,
	AdapterProviderSet,
	GeneralControllerProviderSet,
	CustomerControllerProviderSet,
	AdminControllerProviderSet,
	ControllersProviderSet,
	MiddlewareProviderSet,
	SeederProviderSet,
	ProvideConstants,
	ProvideLoggerConfig,
	ProvideRateLimitConfig,
	ProvideDBConfig,
	ProvideRDBConfig,
	ProvideOTPConfig,
	ProvideSMSGatewayConfig,
	ProvideSMSTemplates,
	ProvideEmailTemplates,
	ProvideJWTKeysPath,
	ProvideMetrics,
	ProvidePaginationConfig,
	ProvideStorageConfig,
	ProvideEmailSenderAccount,
	ProvideSuperAdminCredential,
)

type Database struct {
	DB  database.Database
	RDB database.Cache
}

type GeneralControllers struct {
	UserController    *user.GeneralUserController
	AddressController *address.GeneralAddressController
	NewsController    *news.GeneralNewsController
}

type CustomerControllers struct {
	UserController    *user.CustomerUserController
	AddressController *address.CustomerAddressController
}

type AdminControllers struct {
	UserController *user.AdminUserController
	NewsController *news.AdminNewsController
}

type Controllers struct {
	General  *GeneralControllers
	Customer *CustomerControllers
	Admin    *AdminControllers
}

type Middlewares struct {
	Authentication *middleware.AuthMiddleware
	CORS           *middleware.CORSMiddleware
	Recovery       *middleware.RecoveryMiddleware
	Localization   *middleware.LocalizationMiddleware
	RateLimit      *middleware.RateLimitMiddleware
	Logger         *middleware.LoggerMiddleware
	Prometheus     *middleware.PrometheusMiddleware
}

type Seeds struct {
	AddressSeeder *seed.AddressSeeder
	RoleSeeder    *seed.RoleSeeder
}

type Application struct {
	Database    *Database
	Controllers *Controllers
	Middlewares *Middlewares
	Seeds       *Seeds
}

func NewApplication(database2 *Database,
	controllers *Controllers,
	middlewares *Middlewares,
	seeds *Seeds,
) *Application {
	return &Application{
		Database:    database2,
		Controllers: controllers,
		Middlewares: middlewares,
		Seeds:       seeds,
	}
}
