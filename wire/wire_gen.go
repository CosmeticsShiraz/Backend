// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/CosmeticsShiraz/Backend/bootstrap"
	"github.com/CosmeticsShiraz/Backend/internal/application/service"
	"github.com/CosmeticsShiraz/Backend/internal/application/usecase"
	"github.com/CosmeticsShiraz/Backend/internal/domain/communication"
	logger2 "github.com/CosmeticsShiraz/Backend/internal/domain/logger"
	"github.com/CosmeticsShiraz/Backend/internal/domain/message"
	metrics2 "github.com/CosmeticsShiraz/Backend/internal/domain/metrics"
	postgres2 "github.com/CosmeticsShiraz/Backend/internal/domain/repository/postgres"
	redis2 "github.com/CosmeticsShiraz/Backend/internal/domain/repository/redis"
	"github.com/CosmeticsShiraz/Backend/internal/domain/s3"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/communication/email"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/communication/sms"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/database"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/jwt"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/localization"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/logger"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/metrics"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/rabbitmq"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/rabbitmq/consumer"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/repository/postgres"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/repository/redis"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/seed"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/storage"
	"github.com/CosmeticsShiraz/Backend/internal/infrastructure/websocket"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/address"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/bid"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/blog"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/chat"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/corporation"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/guarantee"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/installation"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/maintenance"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/news"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/notification"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/payment"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/report"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/ticket"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/controller/v1/user"
	"github.com/CosmeticsShiraz/Backend/internal/presentation/middleware"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApplication(container *bootstrap.Config, hub *websocket.Hub) (*Application, error) {
	bootstrapDatabase := ProvideDBConfig(container)
	postgresDatabase := database.NewPostgresDatabase(bootstrapDatabase)
	bootstrapRedis := ProvideRDBConfig(container)
	redisDatabase := database.NewRedisDatabase(bootstrapRedis)
	wireDatabase := &Database{
		DB:  postgresDatabase,
		RDB: redisDatabase,
	}
	constants := ProvideConstants(container)
	otp := ProvideOTPConfig(container)
	userCacheRepository := redis.NewUserCacheRepository(redisDatabase)
	otpService := service.NewOTPService(constants, otp, userCacheRepository)
	keyManager := jwt.NewJWTKeyManager()
	jwtKeysPath := ProvideJWTKeysPath(container)
	jwtService := service.NewJWTService(keyManager, jwtKeysPath)
	smsGateway := ProvideSMSGatewayConfig(container)
	smsTemplates := ProvideSMSTemplates(container)
	smsService := sms.NewSMSService(smsGateway, smsTemplates)
	emailAccount := ProvideEmailSenderAccount(container)
	emailTemplates := ProvideEmailTemplates(container)
	emailService := email.NewEmailService(emailAccount, emailTemplates)
	rabbitMQ := ProvideRabbitMQConfig(container)
	rabbitMQConstants := ProvideRabbitMQConstants(container)
	rabbitmqRabbitMQ := rabbitmq.NewRabbitMQ(rabbitMQ, rabbitMQConstants)
	s3 := ProvideStorageConfig(container)
	s3Storage := storage.NewS3Storage(constants, s3)
	userRepository := postgres.NewUserRepository()
	userServiceDeps := service.UserServiceDeps{
		Constants:           constants,
		OTPService:          otpService,
		JWTService:          jwtService,
		SMSService:          smsService,
		EmailService:        emailService,
		RabbitMQ:            rabbitmqRabbitMQ,
		S3Storage:           s3Storage,
		UserRepository:      userRepository,
		UserCacheRepository: userCacheRepository,
		DB:                  postgresDatabase,
	}
	userService := service.NewUserService(userServiceDeps)
	generalUserController := user.NewGeneralUserController(constants, userService, jwtService)
	addressRepository := postgres.NewAddressRepository()
	addressService := service.NewAddressService(constants, addressRepository, postgresDatabase)
	generalAddressController := address.NewGeneralAddressController(constants, addressService)
	corporationRepository := postgres.NewCorporationRepository()
	corporationService := service.NewCorporationService(constants, userService, addressService, s3Storage, corporationRepository, postgresDatabase)
	generalCorporationController := corporation.NewGeneralCorporationController(constants, corporationService)
	guaranteeRepository := postgres.NewGuaranteeRepository()
	guaranteeService := service.NewGuaranteeService(constants, corporationService, userService, guaranteeRepository, postgresDatabase)
	chatRepository := postgres.NewChatRepository()
	chatService := service.NewChatService(constants, userService, corporationService, chatRepository, postgresDatabase)
	installationRepository := postgres.NewInstallationRepository()
	installationServiceDeps := service.InstallationServiceDeps{
		Constants:              constants,
		AddressService:         addressService,
		UserService:            userService,
		CorporationService:     corporationService,
		GuaranteeService:       guaranteeService,
		ChatService:            chatService,
		InstallationRepository: installationRepository,
		DB:                     postgresDatabase,
	}
	installationService := service.NewInstallationService(installationServiceDeps)
	paymentRepository := postgres.NewPaymentRepository()
	paymentService := service.NewPaymentService(constants, paymentRepository, postgresDatabase)
	bidRepository := postgres.NewBidRepository()
	bidServiceDeps := service.BidServiceDeps{
		Constants:           constants,
		InstallationService: installationService,
		UserService:         userService,
		CorporationService:  corporationService,
		PaymentService:      paymentService,
		GuaranteeService:    guaranteeService,
		RabbitMQ:            rabbitmqRabbitMQ,
		BidRepository:       bidRepository,
		DB:                  postgresDatabase,
	}
	bidService := service.NewBidService(bidServiceDeps)
	maintenanceRepository := postgres.NewMaintenanceRepository()
	maintenanceService := service.NewMaintenanceService(constants, userService, installationService, corporationService, guaranteeService, maintenanceRepository, postgresDatabase)
	reportRepository := postgres.NewReportRepository()
	reportService := service.NewReportService(constants, userService, maintenanceService, installationService, rabbitmqRabbitMQ, reportRepository, postgresDatabase)
	notificationRepository := postgres.NewNotificationRepository()
	notificationServiceDeps := service.NotificationServiceDeps{
		Constants:              constants,
		UserService:            userService,
		BidService:             bidService,
		ReportService:          reportService,
		EmailService:           emailService,
		NotificationRepository: notificationRepository,
		WSHub:                  hub,
		RabbitMQ:               rabbitmqRabbitMQ,
		DB:                     postgresDatabase,
	}
	notificationService := service.NewNotificationService(notificationServiceDeps)
	generalNotificationController := notification.NewGeneralNotificationController(constants, notificationService)
	generalInstallationController := installation.NewGeneralInstallationController(constants, installationService)
	pagination := ProvidePaginationConfig(container)
	newsRepository := postgres.NewNewsRepository()
	newsService := service.NewNewsService(constants, userService, s3Storage, newsRepository, postgresDatabase)
	generalNewsController := news.NewGeneralNewsController(constants, pagination, newsService)
	blogRepository := postgres.NewBlogRepository()
	blogService := service.NewBlogService(userService, corporationService, blogRepository, constants, s3Storage, postgresDatabase)
	generalBlogController := blog.NewGeneralBlogController(constants, blogService, pagination)
	generalPaymentController := payment.NewGeneralPaymentController(constants, paymentService)
	ticketRepository := postgres.NewTicketRepository()
	ticketService := service.NewTicketService(constants, ticketRepository, userService, s3Storage, postgresDatabase)
	generalTicketController := ticket.NewGeneralTicketController(constants, ticketService, pagination)
	generalControllers := &GeneralControllers{
		UserController:         generalUserController,
		AddressController:      generalAddressController,
		CorporationController:  generalCorporationController,
		NotificationController: generalNotificationController,
		InstallationController: generalInstallationController,
		NewsController:         generalNewsController,
		BlogController:         generalBlogController,
		PaymentController:      generalPaymentController,
		TicketController:       generalTicketController,
	}
	customerUserController := user.NewCustomerUserController(constants, userService)
	customerInstallationController := installation.NewCustomerInstallationController(constants, pagination, installationService)
	customerAddressController := address.NewCustomerAddressController(constants, addressService)
	customerCorporationController := corporation.NewCustomerCorporationController(constants, pagination, corporationService)
	customerBidController := bid.NewCustomerBidController(constants, pagination, bidService)
	websocketSetting := ProvideWebsocketSetting(container)
	customerChatController := chat.NewCustomerChatController(constants, pagination, websocketSetting, chatService, jwtService, userService, hub)
	customerNotificationController := notification.NewCustomerNotificationController(constants, websocketSetting, pagination, notificationService, jwtService, userService, hub)
	customerMaintenanceController := maintenance.NewCustomerMaintenanceController(constants, pagination, maintenanceService)
	customerTicketController := ticket.NewCustomerTicketController(constants, ticketService, pagination)
	customerReportController := report.NewCustomerReportController(constants, reportService)
	customerBlogController := blog.NewCustomerBlogController(constants, blogService, pagination)
	customerControllers := &CustomerControllers{
		UserController:         customerUserController,
		InstallationController: customerInstallationController,
		AddressController:      customerAddressController,
		CorporationController:  customerCorporationController,
		BidController:          customerBidController,
		ChatController:         customerChatController,
		NotificationController: customerNotificationController,
		MaintenanceController:  customerMaintenanceController,
		TicketController:       customerTicketController,
		ReportController:       customerReportController,
		BlogController:         customerBlogController,
	}
	corporationCorporationController := corporation.NewCorporationCorporationController(constants, pagination, corporationService)
	corporationInstallationController := installation.NewCorporationInstallationController(constants, pagination, installationService)
	corporationChatController := chat.NewCorporationChatController(constants, chatService)
	corporationBidController := bid.NewCorporationBidController(constants, pagination, bidService)
	corporationMaintenanceController := maintenance.NewCorporationMaintenanceController(constants, pagination, maintenanceService)
	corporationGuaranteeController := guarantee.NewCorporationGuaranteeController(constants, guaranteeService)
	corporationBlogController := blog.NewCorporationBlogController(constants, blogService, pagination)
	corporationControllers := &CorporationControllers{
		CorporationController:  corporationCorporationController,
		InstallationController: corporationInstallationController,
		ChatController:         corporationChatController,
		BidController:          corporationBidController,
		MaintenanceController:  corporationMaintenanceController,
		GuaranteeController:    corporationGuaranteeController,
		BlogController:         corporationBlogController,
	}
	adminTicketController := ticket.NewAdminTicketController(constants, pagination, userService, ticketService)
	adminUserController := user.NewAdminUserController(constants, pagination, userService)
	adminReportController := report.NewAdminReportController(constants, pagination, reportService)
	adminNewsController := news.NewAdminNewsController(constants, pagination, newsService)
	adminCorporationController := corporation.NewAdminCorporationController(constants, pagination, corporationService)
	adminInstallationController := installation.NewAdminInstallationController(constants, pagination, installationService)
	adminBidController := bid.NewAdminBidController(constants, pagination, bidService)
	adminControllers := &AdminControllers{
		TicketController:       adminTicketController,
		UserController:         adminUserController,
		ReportController:       adminReportController,
		NewsController:         adminNewsController,
		CorporationController:  adminCorporationController,
		InstallationController: adminInstallationController,
		BidController:          adminBidController,
	}
	controllers := &Controllers{
		General:     generalControllers,
		Customer:    customerControllers,
		Corporation: corporationControllers,
		Admin:       adminControllers,
	}
	authMiddleware := middleware.NewAuthMiddleware(constants, jwtService, userRepository, postgresDatabase)
	corsMiddleware := middleware.NewCorsMiddleware()
	recoveryMiddleware := middleware.NewRecovery(constants)
	translator := localization.NewTranslationService()
	localizationMiddleware := middleware.NewLocalization(constants, translator)
	rateLimit := ProvideRateLimitConfig(container)
	rateLimitMiddleware := middleware.NewRateLimit(rateLimit)
	bootstrapLogger := ProvideLoggerConfig(container)
	loggerLogger, err := logger.NewLogger(bootstrapLogger, constants)
	if err != nil {
		return nil, err
	}
	loggerMiddleware := middleware.NewLoggerMiddleware(loggerLogger)
	bootstrapMetrics := ProvideMetrics(container)
	prometheusMetrics := metrics.NewPrometheusMetrics(bootstrapMetrics)
	prometheusMiddleware := middleware.NewPrometheusMiddleware(prometheusMetrics)
	websocketMiddleware := middleware.NewWebsocketMiddleware(constants)
	middlewares := &Middlewares{
		Authentication:      authMiddleware,
		CORS:                corsMiddleware,
		Recovery:            recoveryMiddleware,
		Localization:        localizationMiddleware,
		RateLimit:           rateLimitMiddleware,
		Logger:              loggerMiddleware,
		Prometheus:          prometheusMiddleware,
		WebsocketMiddleware: websocketMiddleware,
	}
	addressSeeder := seed.NewAddressSeeder(addressRepository, postgresDatabase)
	notificationTypeSeeder := seed.NewNotificationTypeSeeder(userRepository, notificationRepository, postgresDatabase)
	adminCredentials := ProvideSuperAdminCredential(container)
	roleSeeder := seed.NewRoleSeeder(adminCredentials, userRepository, notificationRepository, postgresDatabase)
	contactTypeSeeder := seed.NewContactTypeSeeder(corporationRepository, postgresDatabase)
	seeds := &Seeds{
		AddressSeeder:          addressSeeder,
		NotificationTypeSeeder: notificationTypeSeeder,
		RoleSeeder:             roleSeeder,
		ContactType:            contactTypeSeeder,
	}
	registerConsumer := consumer.NewRegisterConsumer(rabbitMQConstants, rabbitmqRabbitMQ, notificationService)
	pushConsumer := consumer.NewPushConsumer(rabbitMQConstants, rabbitmqRabbitMQ, hub)
	emailConsumer := consumer.NewEmailConsumer(rabbitMQConstants, rabbitmqRabbitMQ, emailService)
	sendNotificationConsumer := consumer.NewSendNotificationConsumer(rabbitMQConstants, rabbitmqRabbitMQ, notificationService)
	consumers := &Consumers{
		Register:     registerConsumer,
		Push:         pushConsumer,
		Email:        emailConsumer,
		Notification: sendNotificationConsumer,
	}
	application := NewApplication(wireDatabase, controllers, middlewares, seeds, consumers)
	return application, nil
}

// wire.go:

var DatabaseProviderSet = wire.NewSet(database.NewPostgresDatabase, database.NewRedisDatabase, wire.Bind(new(database.Database), new(*database.PostgresDatabase)), wire.Bind(new(database.Cache), new(*database.RedisDatabase)), wire.Struct(new(Database), "*"))

var RepositoryProviderSet = wire.NewSet(postgres.NewUserRepository, postgres.NewInstallationRepository, postgres.NewAddressRepository, redis.NewUserCacheRepository, postgres.NewCorporationRepository, postgres.NewBidRepository, postgres.NewChatRepository, postgres.NewNotificationRepository, postgres.NewMaintenanceRepository, postgres.NewTicketRepository, postgres.NewReportRepository, postgres.NewGuaranteeRepository, postgres.NewPaymentRepository, postgres.NewNewsRepository, postgres.NewBlogRepository, wire.Bind(new(postgres2.UserRepository), new(*postgres.UserRepository)), wire.Bind(new(postgres2.InstallationRepository), new(*postgres.InstallationRepository)), wire.Bind(new(postgres2.AddressRepository), new(*postgres.AddressRepository)), wire.Bind(new(redis2.UserCacheRepository), new(*redis.UserCacheRepository)), wire.Bind(new(postgres2.CorporationRepository), new(*postgres.CorporationRepository)), wire.Bind(new(postgres2.BidRepository), new(*postgres.BidRepository)), wire.Bind(new(postgres2.ChatRepository), new(*postgres.ChatRepository)), wire.Bind(new(postgres2.NotificationRepository), new(*postgres.NotificationRepository)), wire.Bind(new(postgres2.MaintenanceRepository), new(*postgres.MaintenanceRepository)), wire.Bind(new(postgres2.TicketRepository), new(*postgres.TicketRepository)), wire.Bind(new(postgres2.ReportRepository), new(*postgres.ReportRepository)), wire.Bind(new(postgres2.GuaranteeRepository), new(*postgres.GuaranteeRepository)), wire.Bind(new(postgres2.PaymentRepository), new(*postgres.PaymentRepository)), wire.Bind(new(postgres2.NewsRepository), new(*postgres.NewsRepository)), wire.Bind(new(postgres2.BlogRepository), new(*postgres.BlogRepository)))

var ServiceProviderSet = wire.NewSet(wire.Struct(new(service.UserServiceDeps), "*"), wire.Struct(new(service.NotificationServiceDeps), "*"), wire.Struct(new(service.InstallationServiceDeps), "*"), wire.Struct(new(service.BidServiceDeps), "*"), service.NewUserService, service.NewOTPService, sms.NewSMSService, email.NewEmailService, service.NewJWTService, service.NewInstallationService, service.NewAddressService, service.NewCorporationService, service.NewBidService, service.NewChatService, service.NewNotificationService, service.NewMaintenanceService, service.NewTicketService, service.NewReportService, service.NewGuaranteeService, service.NewPaymentService, service.NewNewsService, service.NewBlogService, wire.Bind(new(usecase.UserService), new(*service.UserService)), wire.Bind(new(usecase.OTPService), new(*service.OTPService)), wire.Bind(new(communication.SMSService), new(*sms.SMSService)), wire.Bind(new(communication.EmailService), new(*email.EmailService)), wire.Bind(new(usecase.JWTService), new(*service.JWTService)), wire.Bind(new(usecase.InstallationService), new(*service.InstallationService)), wire.Bind(new(usecase.AddressService), new(*service.AddressService)), wire.Bind(new(usecase.CorporationService), new(*service.CorporationService)), wire.Bind(new(usecase.BidService), new(*service.BidService)), wire.Bind(new(usecase.ChatService), new(*service.ChatService)), wire.Bind(new(usecase.NotificationService), new(*service.NotificationService)), wire.Bind(new(usecase.MaintenanceService), new(*service.MaintenanceService)), wire.Bind(new(usecase.TicketService), new(*service.TicketService)), wire.Bind(new(usecase.ReportService), new(*service.ReportService)), wire.Bind(new(usecase.GuaranteeService), new(*service.GuaranteeService)), wire.Bind(new(usecase.PaymentService), new(*service.PaymentService)), wire.Bind(new(usecase.NewsService), new(*service.NewsService)), wire.Bind(new(usecase.BlogService), new(*service.BlogService)))

var AdapterProviderSet = wire.NewSet(localization.NewTranslationService, logger.NewLogger, jwt.NewJWTKeyManager, metrics.NewPrometheusMetrics, storage.NewS3Storage, rabbitmq.NewRabbitMQ, wire.Bind(new(logger2.Logger), new(*logger.Logger)), wire.Bind(new(metrics2.MetricsClient), new(*metrics.PrometheusMetrics)), wire.Bind(new(s3.S3Storage), new(*storage.S3Storage)), wire.Bind(new(message.Broker), new(*rabbitmq.RabbitMQ)))

var GeneralControllerProviderSet = wire.NewSet(user.NewGeneralUserController, address.NewGeneralAddressController, corporation.NewGeneralCorporationController, notification.NewGeneralNotificationController, installation.NewGeneralInstallationController, news.NewGeneralNewsController, blog.NewGeneralBlogController, payment.NewGeneralPaymentController, ticket.NewGeneralTicketController, wire.Struct(new(GeneralControllers), "*"))

var CustomerControllerProviderSet = wire.NewSet(user.NewCustomerUserController, installation.NewCustomerInstallationController, address.NewCustomerAddressController, corporation.NewCustomerCorporationController, bid.NewCustomerBidController, chat.NewCustomerChatController, notification.NewCustomerNotificationController, maintenance.NewCustomerMaintenanceController, ticket.NewCustomerTicketController, report.NewCustomerReportController, blog.NewCustomerBlogController, wire.Struct(new(CustomerControllers), "*"))

var CorporationControllerProviderSet = wire.NewSet(corporation.NewCorporationCorporationController, installation.NewCorporationInstallationController, chat.NewCorporationChatController, bid.NewCorporationBidController, maintenance.NewCorporationMaintenanceController, guarantee.NewCorporationGuaranteeController, blog.NewCorporationBlogController, wire.Struct(new(CorporationControllers), "*"))

var AdminControllerProviderSet = wire.NewSet(ticket.NewAdminTicketController, user.NewAdminUserController, report.NewAdminReportController, news.NewAdminNewsController, corporation.NewAdminCorporationController, installation.NewAdminInstallationController, bid.NewAdminBidController, wire.Struct(new(AdminControllers), "*"))

var ControllersProviderSet = wire.NewSet(wire.Struct(new(Controllers), "*"))

var MiddlewareProviderSet = wire.NewSet(middleware.NewAuthMiddleware, middleware.NewCorsMiddleware, middleware.NewRecovery, middleware.NewLocalization, middleware.NewRateLimit, middleware.NewLoggerMiddleware, middleware.NewPrometheusMiddleware, middleware.NewWebsocketMiddleware, wire.Struct(new(Middlewares), "*"))

var SeederProviderSet = wire.NewSet(seed.NewAddressSeeder, seed.NewNotificationTypeSeeder, seed.NewRoleSeeder, seed.NewContactTypeSeeder, wire.Struct(new(Seeds), "*"))

var ConsumerProviderSet = wire.NewSet(consumer.NewRegisterConsumer, consumer.NewPushConsumer, consumer.NewEmailConsumer, consumer.NewSendNotificationConsumer, wire.Struct(new(Consumers), "*"))

func ProvideConstants(container *bootstrap.Config) *bootstrap.Constants {
	return container.Constants
}

func ProvideLoggerConfig(container *bootstrap.Config) *bootstrap.Logger {
	return &container.Env.Logger
}

func ProvideRateLimitConfig(container *bootstrap.Config) *bootstrap.RateLimit {
	return &container.Env.RateLimit
}

func ProvideDBConfig(container *bootstrap.Config) *bootstrap.Database {
	return &container.Env.PrimaryDB
}

func ProvideRDBConfig(container *bootstrap.Config) *bootstrap.Redis {
	return &container.Env.PrimaryRedis
}

func ProvideOTPConfig(container *bootstrap.Config) *bootstrap.OTP {
	return &container.Env.OTP
}

func ProvideSMSGatewayConfig(container *bootstrap.Config) *bootstrap.SMSGateway {
	return &container.Env.SMSGateway
}

func ProvideSMSTemplates(container *bootstrap.Config) *bootstrap.SMSTemplates {
	return &container.Constants.SMSTemplates
}

func ProvideJWTKeysPath(container *bootstrap.Config) *bootstrap.JWTKeysPath {
	return &container.Constants.JWTKeysPath
}

func ProvideEmailTemplates(container *bootstrap.Config) *bootstrap.EmailTemplates {
	return &container.Constants.EmailTemplates
}

func ProvideMetrics(container *bootstrap.Config) *bootstrap.Metrics {
	return &container.Constants.Metrics
}

func ProvidePaginationConfig(container *bootstrap.Config) *bootstrap.Pagination {
	return &container.Env.Pagination
}

func ProvideStorageConfig(container *bootstrap.Config) *bootstrap.S3 {
	return &container.Env.Storage
}

func ProvideWebsocketSetting(container *bootstrap.Config) *bootstrap.WebsocketSetting {
	return &container.Env.WebsocketSetting
}

func ProvideEmailSenderAccount(container *bootstrap.Config) *bootstrap.EmailAccount {
	return &container.Env.EmailSenderAccount
}

func ProvideSuperAdminCredential(container *bootstrap.Config) *bootstrap.AdminCredentials {
	return &container.Env.SuperAdmin
}

func ProvideRabbitMQConfig(container *bootstrap.Config) *bootstrap.RabbitMQ {
	return &container.Env.RabbitMQ
}

func ProvideRabbitMQConstants(container *bootstrap.Config) *bootstrap.RabbitMQConstants {
	return &container.Constants.RabbitMQ
}

var ProviderSet = wire.NewSet(
	DatabaseProviderSet,
	RepositoryProviderSet,
	ServiceProviderSet,
	AdapterProviderSet,
	GeneralControllerProviderSet,
	CustomerControllerProviderSet,
	CorporationControllerProviderSet,
	AdminControllerProviderSet,
	ControllersProviderSet,
	MiddlewareProviderSet,
	SeederProviderSet,
	ConsumerProviderSet,
	ProvideConstants,
	ProvideLoggerConfig,
	ProvideRateLimitConfig,
	ProvideDBConfig,
	ProvideRDBConfig,
	ProvideOTPConfig,
	ProvideSMSGatewayConfig,
	ProvideSMSTemplates,
	ProvideEmailTemplates,
	ProvideJWTKeysPath,
	ProvideMetrics,
	ProvidePaginationConfig,
	ProvideStorageConfig,
	ProvideWebsocketSetting,
	ProvideEmailSenderAccount,
	ProvideSuperAdminCredential,
	ProvideRabbitMQConfig,
	ProvideRabbitMQConstants,
)

type Database struct {
	DB  database.Database
	RDB database.Cache
}

type GeneralControllers struct {
	UserController         *user.GeneralUserController
	AddressController      *address.GeneralAddressController
	CorporationController  *corporation.GeneralCorporationController
	NotificationController *notification.GeneralNotificationController
	InstallationController *installation.GeneralInstallationController
	NewsController         *news.GeneralNewsController
	BlogController         *blog.GeneralBlogController
	PaymentController      *payment.GeneralPaymentController
	TicketController       *ticket.GeneralTicketController
}

type CustomerControllers struct {
	UserController         *user.CustomerUserController
	InstallationController *installation.CustomerInstallationController
	AddressController      *address.CustomerAddressController
	CorporationController  *corporation.CustomerCorporationController
	BidController          *bid.CustomerBidController
	ChatController         *chat.CustomerChatController
	NotificationController *notification.CustomerNotificationController
	MaintenanceController  *maintenance.CustomerMaintenanceController
	TicketController       *ticket.CustomerTicketController
	ReportController       *report.CustomerReportController
	BlogController         *blog.CustomerBlogController
}

type CorporationControllers struct {
	CorporationController  *corporation.CorporationCorporationController
	InstallationController *installation.CorporationInstallationController
	ChatController         *chat.CorporationChatController
	BidController          *bid.CorporationBidController
	MaintenanceController  *maintenance.CorporationMaintenanceController
	GuaranteeController    *guarantee.CorporationGuaranteeController
	BlogController         *blog.CorporationBlogController
}

type AdminControllers struct {
	TicketController       *ticket.AdminTicketController
	UserController         *user.AdminUserController
	ReportController       *report.AdminReportController
	NewsController         *news.AdminNewsController
	CorporationController  *corporation.AdminCorporationController
	InstallationController *installation.AdminInstallationController
	BidController          *bid.AdminBidController
}

type Controllers struct {
	General     *GeneralControllers
	Customer    *CustomerControllers
	Corporation *CorporationControllers
	Admin       *AdminControllers
}

type Middlewares struct {
	Authentication      *middleware.AuthMiddleware
	CORS                *middleware.CORSMiddleware
	Recovery            *middleware.RecoveryMiddleware
	Localization        *middleware.LocalizationMiddleware
	RateLimit           *middleware.RateLimitMiddleware
	Logger              *middleware.LoggerMiddleware
	Prometheus          *middleware.PrometheusMiddleware
	WebsocketMiddleware *middleware.WebsocketMiddleware
}

type Seeds struct {
	AddressSeeder          *seed.AddressSeeder
	NotificationTypeSeeder *seed.NotificationTypeSeeder
	RoleSeeder             *seed.RoleSeeder
	ContactType            *seed.ContactTypeSeeder
}

type Consumers struct {
	Register     *consumer.RegisterConsumer
	Push         *consumer.PushConsumer
	Email        *consumer.EmailConsumer
	Notification *consumer.SendNotificationConsumer
}

type Application struct {
	Database    *Database
	Controllers *Controllers
	Middlewares *Middlewares
	Seeds       *Seeds
	Consumers   *Consumers
}

func NewApplication(database2 *Database,
	controllers *Controllers,
	middlewares *Middlewares,
	seeds *Seeds,
	consumers *Consumers,
) *Application {
	return &Application{
		Database:    database2,
		Controllers: controllers,
		Middlewares: middlewares,
		Seeds:       seeds,
		Consumers:   consumers,
	}
}
